@model GoodChildren.Models.ChatView

@{
    ViewData["Title"] = "Home Page";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="wrap d-flex justify-between bg-img">
        <div class="sidebar">
        </div>
        <div class="chat">
            <div class="chat__header">
                Чат с @Model.ReciverName <span class="collocutorName"></span>
            </div>
            <div class="chat__messages">
                @if (ViewBag.Messanges != null)
                {
                    for (int i = 0; i < ViewBag.Messanges.Count; i++)
                    {
                        <div class="commentsListElem">
                            <div class="commentsListTitle">
                                <p class="commentName">
                                    @if (ViewBag.Messanges[i].SenderId == Model.SenderId)
                                        @Model.SenderName
                                    else
                                        @Model.ReciverName
                                </p>
                                <p>@ViewBag.Messanges[i].LineTime</p>
                            </div>
                            <div class="commentsText">
                                @ViewBag.Messanges[i].ChatLine
                            </div>
                        </div>
                    }
                }
            </div>
            @{ 
                string[] test = Model.ReciverName.Split(' ');
            }
            <div class="chat__sendingBlock ">
                <textarea name="" cols="30" rows="10" placeholder="Введите сообщение" class="chat__sendingBlock-message"></textarea>
                <br>
                <input type="submit" class="chat__sendingBlock-send" value="Отправить" />
            </div>
        </div>
    </div>
    <script src="https://unpkg.com/@@microsoft/signalr@3.1.0/dist/browser/signalr.min.js"></script>
    
</body>
</html>

<script charset="utf-8" type="text/javascript">
let chatId = @Model.chatId;
let SenderId = @Model.SenderId;
let SenderName = "@Model.SenderName";
let ReciverId = @Model.ReciverId;
let ReciverName = "@Model.ReciverName";


const hubConnection = new signalR.HubConnectionBuilder()
    .withUrl("/chat")
    .build();

    async function postServ(data, url) {
        fetch(url, {
            method: "POST",
            body: data
        })
    }

    hubConnection.on("Receive", function (messa, chatId, reciverId, LineTime, userName) {
        console.log(userName, ReciverName )
        if (userName == ReciverName) {
            addComment(messa, userName, LineTime, document.querySelector(".chat__messages"))
            console.log(SenderId, chatId)
            let LookMeseng = new FormData;
            LookMeseng.append("UserId", SenderId);
            LookMeseng.append("ChatId", chatId);
            LookMeseng.append("State", false);
            postServ(LookMeseng, "/Home/LookMesseng")
            console.log(data)
        }

});

    document.querySelector(".chat__sendingBlock-send").addEventListener("click", function (e) {
    let message = document.querySelector(".chat__sendingBlock-message").value;
        let to = ReciverName;
        let messa = {
            Id:0,
            ChatId: @Model.chatId,
            SenderId: @Model.SenderId,
            ReciverId: @Model.ReciverId,
            ChatLine: message,
            LineTime: new Date() //`${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`
        }
    let date = new Date()
        let datevalue = { date: `${date.getDate()}.${(date.getMonth() + 1 < 10) ? `0${date.getMonth() + 1}` : date.getMonth() + 1}`, time: `${new Date(01, 11, 2020, date.getUTCHours() + 3).getHours()}:${(date.getUTCMinutes() + 1 < 10) ? `0${date.getUTCMinutes() + 1}` : date.getUTCMinutes() + 1}` }
        addComment(message, SenderName, messa.LineTime, document.querySelector(".chat__messages"))
    date.setHours(date.getUTCHours() + 3)

    const data = new FormData();
    data.append("ChatId", chatId);
    data.append("SenderId", SenderId);
    data.append("ReciverId", ReciverId);
    data.append("ChatLine", message);
    data.append("LineTime", `${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`);
        postServ(data, "/Home/message")
        console.log(messa)
        hubConnection.invoke("Send", messa.ChatLine, messa.ChatId, messa.ReciverId, messa.LineTime, to);

        console.log(`${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`);
});

    let addComment = (message, username, time, comments) => {
        let commentElem = document.createElement("div")
        commentElem.classList.add("commentsListElem");
        let comment = document.createElement("div");
        comment.classList.add("commentsListTitle");
        let author = document.createElement("p");
        author.classList.add("commentName");
        author.innerText = username;
        comment.appendChild(author)
        author = document.createElement("p");
        author.innerText = time
        comment.appendChild(author);
        commentElem.appendChild(comment);
        comment = document.createElement("p")
        comment.innerText = message;
        comment.classList.add("commentsText");
        commentElem.appendChild(comment);
        comments.appendChild(commentElem);
    }

    const isValid = (str) =>{
    return !/[~`#$\^&\[\]\\';/{}|\\<>]/g.test(str);
}
    hubConnection.start();
</script>